/**
 * @packageDocumentation
 * @module structure
 */
import { GUID } from '../utils';
import { PositioningCallback } from '../utils';
import { Environment, Settings, Structure } from '../dataset';
/** Possible options passed to `MoleculeViewer.load` */
export interface LoadOptions {
    /** Supercell to display (default: [1, 1, 1]) */
    supercell: [number, number, number];
    /** Should preserve we the current camera orientation (default: false) */
    keepOrientation: boolean;
    /** Are we loading a file part of a trajectory (default: false) */
    trajectory: boolean;
    /** List of atom-centered environments in the current structure, potentially
     * undefined if the environnement is not part of the dataset.
     * The `structure` field of `Environment` is ignored */
    environments: (Environment | undefined)[];
    /**
     * Index of the environment to highlight, this is only considered if
     * `environments` is set.
     */
    highlight: number;
}
/** */
export declare class MoleculeViewer {
    /** callback called when a new atom is clicked on */
    onselect: (atom: number) => void;
    /**
     * Callback to get the initial positioning of the settings modal.
     *
     * The callback is called once, the first time the settings are opened.
     */
    positionSettingsModal: PositioningCallback;
    /**
     * Unique identifier of this viewer.
     *
     * All HTML elements created by this class use this ID to ensure uniqueness.
     */
    guid: GUID;
    private _root;
    private _viewer;
    private _current?;
    private _highlighted?;
    private _axes?;
    private _options;
    private _initialSupercell?;
    private _resetEnvCutoff;
    private _resetSupercell;
    private _cellInfo;
    private _trajectoryOptions;
    private _styles;
    private _environments?;
    /**
     * Create a new `MoleculeViewer` inside the HTML DOM element with the given `id`.
     *
     * @param element HTML element or HTML id of the DOM element
     *                where the viewer will be created
     * @param guid (optional) unique identifier for the widget
     */
    constructor(element: string | HTMLElement, guid?: string);
    /**
     * Remove all HTML added by this [[MoleculeViewer]] in the current document
     */
    remove(): void;
    /**
     * Resize the 3Dmol viewer/canvas to the size of the HTML element containing
     * this widget.
     */
    resize(): void;
    /**
     * Get the number of atoms in the structure, or `undefined` if no structure
     * is currently loaded
     *
     * @return the number of atoms in the currently loaded structure
     */
    natoms(): number | undefined;
    /**
     * Load the given `structure` in this viewer.
     *
     * @param structure structure to load
     * @param options options for the new structure
     */
    load(structure: Structure, options?: Partial<LoadOptions>): void;
    /** Setup interaction (click & hover) for environments highlighting */
    private _setEnvironmentInteractions;
    /**
     * Highlight a given `atom` in the current structure.
     *
     * If a supercell larger than [1, 1, 1] is currently displayed, this
     * function accept indexes larger than the result of `natoms()`, and will
     * then highlight atoms outside of the central image.
     *
     * @param center index of the central atom in the environment to show,
     *               or `undefined` to disable highlighting.
     */
    highlight(center?: number): void;
    /**
     * Applies saved settings, possibly filling in with default values
     */
    applySettings(settings: Settings): void;
    /**
     * Save the values of the current settings in a way that an be used with
     * [[applySettings]] or saved to JSON.
     */
    saveSettings(): Settings;
    /**
     * Add the given `callback` to be called whenever a setting changes. The
     * callback will be given the path to the settings as a list of keys; and
     * the new value of the setting.
     *
     * There is currently no way to remove a callback.
     */
    onSettingChange(callback: (keys: string[], value: unknown) => void): void;
    /**
     * Returns a PNG screenshot of the viewer as a URI string
     */
    exportPNG(): string;
    _setHoverable(active: number[]): void;
    private _connectOptions;
    /**
     * Function called whenever the user click on an atom in the viewer
     */
    private _selectAtom;
    /**
     * Update the styles of all atoms as required
     */
    private _updateStyle;
    /**
     * Get the main style used for all atoms/atoms inside the environment when
     * highlighting a specific environment
     */
    private _mainStyle;
    /**
     * Get the style specification for the hidden/background atoms when
     * highlighting a specific environment
     */
    private _hiddenStyle;
    /**
     * Get the style specification for the central atom when
     * highlighting a specific environment
     */
    private _centralStyle;
    /**
     * Show the information related to supercell in a small box on the bottom
     * right corner.
     */
    private _showSupercellInfo;
    /**
     * Check whether environments are enabled or not
     */
    private _environmentsEnabled;
    /**
     * Enable (if `show` is true) or disable (if `show` is false) the settings
     * related to environments
     */
    private _enableEnvironmentSettings;
    /**
     * Get the cutoff for the environment around the given `center`
     */
    private _cutoffAround;
    /**
     * Change which central atom is highlighted in the system to `center`. If
     * `center` is undefined, this disable highlighting.
     *
     * @param center index of the atom to highlight
     */
    private _changeHighlighted;
    /**
     * Reset the view by re-centering it and zooming to fit the model as much as
     * possible inside the views.
     */
    private _resetView;
    /**
     * Centers the view around the selected atom (if there is one)
     */
    private _centerView;
    /**
     * Rotate the viewed group so that the given direction (in group
     * coordinates) is aligned with the z axis (in camera space)
     *
     * @param direction axis to align with the camera view
     */
    private _viewAlong;
    /**
     * Add a labeled arrow of the given color from 0 to the given position, with
     * the given label.
     */
    private _addLabeledArrow;
}
