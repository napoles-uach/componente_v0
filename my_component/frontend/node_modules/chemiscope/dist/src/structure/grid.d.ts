/**
 * @packageDocumentation
 * @module structure
 */
import { Environment, Settings, Structure, UserStructure } from '../dataset';
import { EnvironmentIndexer, Indexes } from '../indexer';
import { GUID, PositioningCallback } from '../utils';
/**
 * The [[ViewersGrid]] class displays a grid of molecule or a crystal viewers
 * in 3D using [[MolecularViewer]] widgets for rendering.
 */
export declare class ViewersGrid {
    /** Callback used when the user select an environment */
    onselect: (indexes: Indexes) => void;
    /** Callback fired when a viewer is removed from the grid */
    onremove: (guid: GUID) => void;
    /**
     * Callback fired when a new viewer is created
     *
     * @param guid GUID of the new viewer
     * @param color GUID of the marker indicating the new viewer
     * @param indexes environment showed in the new viewer
     */
    oncreate: (guid: GUID, color: string, indexes: Indexes) => void;
    /**
     * Callback fired when the active viewer is changed
     *
     * @param guid GUID of the new active viewer
     * @param indexes environment showed in the new active viewer
     */
    activeChanged: (guid: GUID, indexes: Indexes) => void;
    /**
     * Callback fired when the playback delay for structure/atom playback changed
     *
     * @param delay the new delay value
     */
    delayChanged: (delay: number) => void;
    /**
     * Callback used when a new structure should be loaded
     *
     * By default, this assumes that the loaded dataset contains [[Structure]]
     * directly, and returns the data from there. If the loaded dataset contains
     * [[UserStructure]] instead, this callback should be set to transform from
     * data in [[UserStructure.data]] to a [[Structure]].
     *
     * The callback gets two parameter: the structure index (0-based); and the
     * full [[UserStructure]].
     */
    loadStructure: (index: number, structure: unknown) => Structure;
    private _root;
    private _structures;
    private _resolvedStructures;
    private _environments?;
    private _maxViewers;
    private _indexer;
    private _active;
    private _viewers;
    private _positionSettingsModal?;
    private _onSettingChangeCallbacks;
    /**
     * Create a new [[ViewersGrid]] inside the HTML element with the given
     * `id`
     *
     * @param element      HTML element or string 'id' of the element where
     *                     viewer should live
     * @param indexer      [[EnvironmentIndexer]] used to translate indexes from
     *                     environments index to structure/atom indexes
     * @param structures   list of structure to display
     * @param environments list of atom-centered environments in the structures,
     *                     used to highlight the selected environment
     * @param maxViewers   maximum number of allowed structure viewers
     */
    constructor(element: string | HTMLElement, indexer: EnvironmentIndexer, structures: Structure[] | UserStructure[], environments?: Environment[], maxViewers?: number);
    /**
     * Get the current active viewer GUID
     */
    get active(): GUID;
    /**
     * Get the current list of environments showed inside the different viewer
     */
    pinned(): Indexes[];
    /**
     * Show a new structure, as identified by `indexes` in the active viewer.
     *
     * This will switch to the structure at index `indexes.structure`, and if
     * environments where passed to the constructor and the current display
     * mode is `'atom'`, highlight the atom-centered environment corresponding
     * to `indexes.atom`.
     *
     * @param  indexes         structure / atom pair to display
     */
    show(indexes: Indexes): void;
    /**
     * Add a new empty viewer to the grid
     *
     * @return the GUID and color of the new viewer, the GUID is `undefined`
     *         if we already reached the viewer limit.
     */
    addViewer(): {
        guid?: GUID;
        color: string;
    };
    /**
     * Removes the viewer with the given `guid` from the viewer grid.
     *
     * @param guid GUID of the viewer to remove
     */
    removeViewer(guid: GUID): void;
    /**
     * Remove all HTML added by this [[ViewersGrid]] in the current document
     */
    remove(): void;
    /**
     * Function to set the active widget for communicating with the map
     */
    setActive(guid: GUID): void;
    /**
     * Set a callback to get the initial positioning of the settings modal of
     * the viewers. The same callback is used for all viewers in the grid.
     *
     * The callback gets the current placement of the settings as a
     * [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect), and
     * should return top and left positions in pixels, used with `position:
     * fixed`. The callback is called once, the first time the settings are
     * opened.
     */
    set positionSettingsModal(value: PositioningCallback);
    /**
     * Apply the given saved setting to all viewers in the grid.
     *
     * The settings must be in viewer creation order.
     *
     * @param settings settings for all viewers in the grid
     */
    applySettings(settings: Settings[]): void;
    /**
     * Get the current values of settings for all viewers in the grid.
     *
     * The settings are given in viewer creation order.
     *
     * @return the settings in an array, suitable to be used with [[applySettings]]
     */
    saveSettings(): Settings[];
    /**
     * Add the given `callback` to be called whenever a setting changes. The
     * callback will be given the path to the settings as a list of keys; and
     * the new value of the setting.
     *
     * There is currently no way to remove a callback.
     */
    onSettingChange(callback: (keys: string[], value: unknown) => void): void;
    /**
     * Add a new structure viewer to the grid as a copy of the viewer with the
     * `initial` GUID. The new structure viewer is set as the active one.
     *
     * @param  initial GUID of the viewer to duplicate
     * @return the GUID of the new viewer, or `undefined` if we already
     *         reached the viewer limit.
     */
    private _duplicate;
    /**
     * Get the structure at the given index, potentially loading them using a
     * user provided loading function.
     *
     * @param  index index of the structure
     * @return       a Structure instance
     */
    private _structure;
    private _showInViewer;
    /**
     * Get an unused color to identify a viewer
     *
     * @return a CSS compatible color name
     */
    private _getNextColor;
    /**
     * Function to setup the cell in the structure viewer grid.
     * Will generate a GUID string if one does not exist for the cell
     * and instantiate all necessary buttons.
     */
    private _setupCell;
    /**
     * Function to initialize the grid instance for `this._nwidgets` cells and
     * place onto the DOM element mapped in `this._root`. If more cells are
     * needed, this function return the list of new cell GUID
     */
    private _setupGrid;
    /**
     * Function to return *optimal* arrangement of n widgets.
     */
    private bestGridArrangement;
    /** get the current position in the viewer grid of a viewer by GUID */
    private _getCurrentPositionInGrid;
}
