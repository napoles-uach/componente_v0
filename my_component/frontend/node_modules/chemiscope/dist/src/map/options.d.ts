/**
 * @packageDocumentation
 * @module settings
 */
import { Settings } from '../dataset';
import { HTMLOption, OptionsGroup } from '../options';
import { GUID, PositioningCallback } from '../utils';
import { NumericProperties, NumericProperty } from './data';
export declare function get3DSymbol(i: number): string;
/** HTML element holding settings for a given axis (x, y, z, color) */
export declare class AxisOptions extends OptionsGroup {
    property: HTMLOption<'string'>;
    scale: HTMLOption<'string'>;
    min: HTMLOption<'number'>;
    max: HTMLOption<'number'>;
    constructor(validProperties: string[]);
    /** Disable auxiliary settings (min/max/scale) related to this axis */
    disable(): void;
    /** Enable auxiliary settings (min/max/scale) related to this axis */
    enable(): void;
}
export declare class MapOptions extends OptionsGroup {
    x: AxisOptions;
    y: AxisOptions;
    z: AxisOptions;
    color: AxisOptions;
    palette: HTMLOption<'string'>;
    symbol: HTMLOption<'string'>;
    size: {
        factor: HTMLOption<'number'>;
        mode: HTMLOption<'string'>;
        property: HTMLOption<'string'>;
        reverse: HTMLOption<'boolean'>;
    };
    private _guid;
    private _openModal;
    private _modal;
    private _positionSettingsModal;
    constructor(root: HTMLElement, guid: GUID, properties: NumericProperties, positionSettings: PositioningCallback, settings?: Settings);
    /**
     * Apply saved settings to all the map options
     *
     * @param settings settings for all panels
     */
    applySettings(settings: Settings): void;
    /**
     * Remove all HTML added by this [[MapSettings]] in the current document
     */
    remove(): void;
    /** Is the current plot in 3D mode? */
    is3D(): boolean;
    /** Does the current plot use color values? */
    hasColors(): boolean;
    /** Get the plotly hovertemplate depending on `this._current.color` */
    hovertemplate(): string;
    /**
     * Get the values to use as marker size with the given plotly `trace`, or
     * all of them if `trace === undefined`.
     */
    calculateSizes(rawSizes: number[]): number[];
    /** Given the property, return the symbols */
    getSymbols(property: NumericProperty): number[] | string[];
    /** Get the full id corresponding to an element */
    getId(id: string): string;
    /**
     * Create the settings modal by adding HTML to the page
     * @param  guid unique identifier of this map, used as prefix for all
     *              elements ID
     * @return      the modal HTML element, not yet inserted in the document
     */
    private _createSettingsHTML;
    /** Bind all options to the corresponding HTML elements */
    private _bind;
    /** Get the colorscale to use for markers in the main plotly trace */
    colorScale(): Plotly.ColorScale;
    /** Changes the min/max range label between linear and log appropriately */
    setLogLabel(axis: AxisOptions, axisName: string): void;
}
