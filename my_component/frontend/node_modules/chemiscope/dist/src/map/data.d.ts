/**
 * @packageDocumentation
 * @module map
 */
import { Property } from '../dataset';
/** @hidden
 * Properties turned into numeric values to be displayed on the map.
 */
export interface NumericProperty {
    /** values for the property */
    values: number[];
    /** string interner if the property was a string-valued property */
    string?: StringInterner;
    /** unit of the property */
    units?: string;
}
/** @hidden
 * A simple string => number association, giving a single numeric id to each
 * string.
 */
export declare class StringInterner {
    private _values;
    /** Create a new empty [[StringInterner]] */
    constructor();
    /** Get the index associated with the given string `value` */
    get(value: string): number;
    /** Get the string associated with the given `index` */
    string(index: number): string;
    /** Get all the strings known by this interner */
    strings(): string[];
}
export interface NumericProperties {
    [name: string]: NumericProperty;
}
/** @hidden
 * Data storage for maps, differenciating between numeric/string and
 * structure/atom properties
 *
 * String properties can be used to assing classes to each data point. They are
 * mapped to a numeric value using the `StringInterner` for easier
 * visualization.
 */
export declare class MapData {
    /** Structure properties */
    structure: NumericProperties;
    /** Atomic properties */
    atom: NumericProperties;
    /** Maximal number of symbols (i.e. different values in string properties) in this dataset */
    maxSymbols: number;
    /** Create a new [[MapData]] containing values from the given properties */
    constructor(properties: {
        [name: string]: Property;
    });
}
