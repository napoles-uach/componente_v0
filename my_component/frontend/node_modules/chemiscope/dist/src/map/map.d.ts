/**
 * @packageDocumentation
 * @module map
 */
import { Property, Settings } from '../dataset';
import { EnvironmentIndexer, Indexes } from '../indexer';
import { GUID, PositioningCallback } from '../utils';
/**
 * The [[PropertiesMap]] class displays a 2D or 3D map (scatter plot) of
 * properties in the dataset, using [plotly.js](https://plot.ly/javascript/)
 * for rendering.
 *
 * Properties can be used as x, y, or z values, as well as points color and
 * size. Additionally, string properties can be used as symbols for the scatter
 * plot markers.
 */
export declare class PropertiesMap {
    /** Callback fired when the plot is clicked and the position of the active marker changes */
    onselect: (indexes: Indexes) => void;
    /**
     * Callback fired when the active marker is changed by clicking on the map
     *
     * @param guid GUID of the new active marker
     * @param indexes index of the environment the new active marker is showing
     */
    activeChanged: (guid: GUID, indexes: Indexes) => void;
    /**
     * Callback to get the initial positioning of the settings modal.
     *
     * The callback gets the current placement of the settings as a
     * [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect), and
     * should return top and left positions in pixels, used with `position:
     * fixed`. The callback is called once, the first time the settings are
     * opened.
     */
    positionSettingsModal: PositioningCallback;
    private _root;
    private _plot;
    private _data;
    private _active?;
    private _selected;
    private _indexer;
    private _options;
    private _colorReset;
    /**
     * Create a new [[PropertiesMap]] inside the DOM element with the given HTML
     * `id`
     *
     * @param element   HTML element or string 'id' of the element where
     *                   the map should live
     * @param indexer    [[EnvironmentIndexer]] used to translate indexes from
     *                   environments index to structure/atom indexes
     * @param properties properties to be displayed
     */
    constructor(config: {
        element: string | HTMLElement;
        settings: Settings;
    }, indexer: EnvironmentIndexer, properties: {
        [name: string]: Property;
    });
    /**
     * Remove all HTML added by this [[PropertiesMap]] in the current document
     */
    remove(): void;
    /**
     * Change the environment indicated by the currently active marker to
     * the one with the given `indexes`
     */
    select(indexes: Indexes): void;
    /**
     * Set the marker with given GUID as the active marker.
     *
     * @param guid the GUID of the new active viewer
     */
    setActive(guid: GUID): void;
    /**
     * Add a new marker to the map. The new marker is set as the active one
     *
     * @param guid GUID of the new marker
     * @param indexes indexes of the environment that the new marker should show
     */
    addMarker(guid: GUID, color: string, indexes: Indexes): void;
    /**
     * Removes a marker from the map.
     *
     * @param guid GUID of the marker to remove
     */
    removeMarker(guid: GUID): void;
    /**
     * Apply saved settings to the map.
     */
    applySettings(settings: Settings): void;
    /**
     * Save the values of the current settings in a way that an be used with
     * [[applySettings]] or saved to JSON.
     */
    saveSettings(): Settings;
    /**
     * Add the given `callback` to be called whenever a setting changes. The
     * callback will be given the path to the settings as a list of keys; and
     * the new value of the setting.
     *
     * There is currently no way to remove a callback.
     */
    onSettingChange(callback: (keys: string[], value: unknown) => void): void;
    /** Forward to Plotly.restyle */
    private _restyle;
    /** Forward to Plotly.relayout */
    private _relayout;
    /** Add all the required callback to the settings */
    private _connectSettings;
    /** Actually create the Plotly plot */
    private _createPlot;
    /** Get the property with the given name */
    private _property;
    /**
     * Get the values associated with the given `axis`, to use with the given
     * plotly `trace`, or all of them if `trace === undefined`
     *
     * @param  axis   Options of the axis we need coordinates for
     * @param  trace  plotly trace for which we require coordinate
     * @return        data usable with Plotly.restyle
     */
    private _coordinates;
    private _title;
    /**
     * Get the color values to use with the given plotly `trace`, or all of
     * them if `trace === undefined`
     */
    private _colors;
    /**
     * Get the **line** color values to use with the given plotly `trace`, or
     * all of them if `trace === undefined`
     */
    private _lineColors;
    /**
     * Get the values to use as marker size with the given plotly `trace`, or
     * all of them if `trace === undefined`.
     */
    private _sizes;
    /**
     * Get the values to use as marker symbol with the given plotly `trace`, or
     * all of them if `trace === undefined`.
     */
    private _symbols;
    /** Should we show the legend for the various symbols used? */
    private _showlegend;
    /** Get the list of symbols names to use for the legend */
    private _legendNames;
    /**
     * Select either main, selected or both depending on `trace`, and return
     * them in a mode usable with `Plotly.restyle`/[[PropertiesMap._restyle]]
     */
    private _selectTrace;
    /** Get the length of the colorbar to accommodate for the legend */
    private _colorbarLen;
    /** Is the the current plot a 3D plot? */
    private _is3D;
    /** How many symbols are on this plot?*/
    private _symbolsCount;
    /** Switch current plot from 2D to 3D */
    private _switch3D;
    /** Switch current plot from 3D back to 2D */
    private _switch2D;
    /**
     * Function used as callback to update the axis ranges in settings after
     * the user changes zoom or range on the plot
     */
    private _afterplot;
    /**
     * Update the position, color & size of markers. If `markers` is present, only
     * markers inside the array are updated, otherwise everything is updated.
     */
    private _updateMarkers;
    private _getBounds;
    private _pixelCoordinate;
    /** Changes the step of the arrow buttons in min/max input based on dataset range*/
    private _setScaleStep;
}
