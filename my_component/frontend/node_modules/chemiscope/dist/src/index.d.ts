/**
 * Welcome to Chemiscope's API documentation
 *
 * The default visualization is organized around four panels: the
 * [[MetadataPanel|metadata]] panel; the [[PropertiesMap|map]] (a scatter plot of
 * properties), the [[ViewersGrid|structure viewer]], and the general
 * dataset [[EnvironmentInfo|information]]. Each one of these is defined in a
 * separate module.
 *
 * Other organization of the visualization are possible by using the classes
 * responsible for each sub-panel separately, instead of using the
 * [[DefaultVisualizer]]. In this case, developers should make sure to finish
 * the plumbing by setting the right callbacks on each element used.
 *
 * @packageDocumentation
 * @module main
 * @preferred
 */
import { DisplayMode, EnvironmentIndexer, Indexes } from './indexer';
import { EnvironmentInfo } from './info';
import { PropertiesMap } from './map';
import { MetadataPanel } from './metadata';
import { LoadOptions, MoleculeViewer, ViewersGrid } from './structure';
import { Dataset, Environment, Metadata, Property, Settings, Structure, Target, UserStructure } from './dataset';
import { GUID, PositioningCallback, WarningHandler, addWarningHandler } from './utils';
/**
 * Configuration for the [[DefaultVisualizer]]
 */
export interface DefaultConfig {
    /** Id of the DOM element to use for the [[MetadataPanel|metadata display]] */
    meta: string | HTMLElement;
    /** Id of the DOM element to use for the [[PropertiesMap|properties map]] */
    map: string | HTMLElement;
    /** Id of the DOM element to use for the [[EnvironmentInfo|environment information]] */
    info: string | HTMLElement;
    /** Id of the DOM element to use for the [[ViewersGrid|structure viewer]] */
    structure: string | HTMLElement;
    /** Custom structure loading callback, used to set [[ViewersGrid.loadStructure]] */
    loadStructure?: (index: number, structure: unknown) => Structure;
    /** Maximum number of structure viewers allowed in [[ViewersGrid]] */
    maxStructureViewers?: number;
}
/**
 * The default visualization state of chemiscope: three panels (map, structure,
 * info) updating one another when the user interact with any of them.
 */
declare class DefaultVisualizer {
    /**
     * Load a dataset and create a visualizer.
     *
     * This function returns a `Promise<DefaultVisualizer>` to prevent blocking
     * the browser while everything is loading.
     *
     * @param  config  configuration of the visualizer
     * @param  dataset visualizer input, containing a dataset and optional visualization settings
     * @return         Promise that resolves to a [[DefaultVisualizer]]
     */
    static load(config: DefaultConfig, dataset: Dataset): Promise<DefaultVisualizer>;
    map: PropertiesMap;
    info: EnvironmentInfo;
    meta: MetadataPanel;
    structure: ViewersGrid;
    private _indexer;
    private _dataset;
    private _pinned;
    private constructor();
    /**
     * Removes all the chemiscope widgets from the DOM
     */
    remove(): void;
    /**
     * Get the current values of settings for all panels in the visualizer
     *
     * @return the viewers settings, suitable to be used with [[applySettings]]
     */
    saveSettings(): Settings;
    /**
     * Apply the given settings to all panels in the visualizer
     *
     * @param settings settings for all panels
     */
    applySettings(settings: Partial<Settings>): void;
    /**
     * Add the given `callback` to be called whenever a setting changes. The
     * callback will be given the path to the settings as a list of keys; and
     * the new value of the setting.
     *
     * There is currently no way to remove a callback.
     */
    onSettingChange(callback: (keys: string[], value: unknown) => void): void;
    /**
     * Get the dataset used to create the current visualization
     *
     * If the dataset is using user-specified structures and a loading callback
     * [[DefaultConfig.loadStructure]]; you can request all structure to be fully
     * resolved and placed inside the dataset.
     *
     * @param  getStructures should all [[UserStructure]] resolved and placed
     *                       inside the dataset?
     * @return the dataset currently visualized
     */
    dataset(getStructures?: boolean): Dataset;
}
/**
 * Configuration for the [[StructureVisualizer]]
 */
export interface StructureConfig {
    /** Id of the DOM element to use for the [[MetadataPanel|metadata display]] */
    meta: string | HTMLElement;
    /** Id of the DOM element to use for the [[EnvironmentInfo|environment information]] */
    info: string | HTMLElement;
    /** Id of the DOM element to use for the [[ViewersGrid|structure viewer]] */
    structure: string | HTMLElement;
    /** Custom structure loading callback, used to set [[ViewersGrid.loadStructure]] */
    loadStructure?: (index: number, structure: unknown) => Structure;
}
/**
 * A structure-only chemiscope visualizer: two panels (map,
 * info) updating one another when the user interact with any of them.
 */
declare class StructureVisualizer {
    /**
     * Load a dataset and create a visualizer.
     *
     * This function returns a `Promise<StructureVisualizer>` to prevent blocking
     * the browser while everything is loading.
     *
     * @param  config  configuration of the visualizer
     * @param  dataset visualizer input, containing a dataset and optional visualization settings
     * @return         Promise that resolves to a [[StructureVisualizer]]
     */
    static load(config: StructureConfig, dataset: Dataset): Promise<StructureVisualizer>;
    info: EnvironmentInfo;
    meta: MetadataPanel;
    structure: ViewersGrid;
    private _indexer;
    private constructor();
    /**
     * Removes all the chemiscope widgets from the DOM
     */
    remove(): void;
    /**
     * Apply the given `settings` to the structure panels in the visualizer
     */
    applySettings(settings: Partial<Settings>): void;
    /**
     * Get the current values of settings for all panels in the visualizer
     */
    saveSettings(): Settings;
    /**
     * Add the given `callback` to be called whenever a setting changes. The
     * callback will be given the path to the settings as a list of keys; and
     * the new value of the setting.
     *
     * There is currently no way to remove a callback.
     */
    onSettingChange(callback: (keys: string[], value: unknown) => void): void;
}
/**
 * Configuration for the [[StructureVisualizer]]
 */
export interface MapConfig {
    /** Id of the DOM element to use for the [[PropertiesMap|properties map]] */
    map: string | HTMLElement;
    /** Id of the DOM element to use for the [[EnvironmentInfo|environment information]] */
    info: string | HTMLElement;
    /** Id of the DOM element to use for the [[MetadataPanel|metadata display]] */
    meta: string | HTMLElement;
}
/**
 * A map-only visualizer state of chemiscope
 */
declare class MapVisualizer {
    /**
     * Load a dataset and create a visualizer.
     *
     * This function returns a `Promise<MapVisualizer>` to prevent blocking
     * the browser while everything is loading.
     *
     * @param  config  configuration of the visualizer
     * @param  dataset visualizer input, containing a dataset and optional visualization settings
     * @return         Promise that resolves to a [[MapVisualizer]]
     */
    static load(config: MapConfig, dataset: Dataset): Promise<MapVisualizer>;
    info: EnvironmentInfo;
    map: PropertiesMap;
    meta: MetadataPanel;
    private _indexer;
    private constructor();
    /**
     * Removes all the chemiscope widgets from the DOM
     */
    remove(): void;
    /**
     * Get the current values of settings for all panels in the visualizer
     */
    saveSettings(): Settings;
    /**
     * Apply the given `settings` to the structure panels in the visualizer
     */
    applySettings(settings: Partial<Settings>): void;
    /**
     * Add the given `callback` to be called whenever a setting changes. The
     * callback will be given the path to the settings as a list of keys; and
     * the new value of the setting.
     *
     * There is currently no way to remove a callback.
     */
    onSettingChange(callback: (keys: string[], value: unknown) => void): void;
}
/** Get the version of chemiscope as a string */
declare function version(): string;
export { addWarningHandler, version, Dataset, Metadata, Property, Target, Structure, UserStructure, Environment, Settings, MetadataPanel, PropertiesMap, ViewersGrid, MoleculeViewer, LoadOptions, EnvironmentInfo, EnvironmentIndexer, DefaultVisualizer, StructureVisualizer, MapVisualizer, DisplayMode, GUID, PositioningCallback, Indexes, WarningHandler, };
