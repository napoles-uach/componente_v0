/**
 * @packageDocumentation
 * @module utils
 */
import { Environment, Structure, UserStructure } from './dataset';
/**
 * If a dataset contains both atomic and structure properties, we can only
 * display one kind at the time, indicated by the [[DisplayMode]].
 */
export declare type DisplayMode = 'structure' | 'atom';
/**
 * Indexes related to a single entry in a property.
 *
 * This can exists in either structure mode (in which case `environnement ===
 * structure` and atom is undefined); or atom mode. In atom mode, the
 * environnement is the index of the entry in the property, and structure/atom
 * define to which atom in which structure the entry correspond.
 */
export interface Indexes {
    /** The global environment index. */
    environment: number;
    /**
     * Index of the structure which the [[Indexes.environment|environment]]
     * corresponds to.
     */
    structure: number;
    /**
     * Index of the atom in the structure which corresponds to the environment.
     *
     * If we are considering structures properties, this is `undefined`.
     */
    atom?: number;
}
/**
 * [[EnvironmentIndexer]] links environment index and structure/atom indexes
 *
 * Environments can be either full structures or centered on a specific atom.
 * This class makes the link between two representations: a single, global,
 * environment index, used by the map; and the structure/atom pair, used by
 * the structure viewer and the general information panel.
 */
export declare class EnvironmentIndexer {
    /**
     * Current [[DisplayMode]]. This is useful for datasets that
     * contain both atom-level and structure-level properties.
     */
    mode: DisplayMode;
    private _structures;
    private _environments?;
    private _activeStructures;
    private _activeAtoms;
    /**
     * Create a new [[EnvironmentIndexer]] for the given set of structures and
     * environments.
     *
     * @param mode         should we display atomic or structure properties
     * @param structures   structures used in the current dataset
     * @param environments environments used in the current dataset
     */
    constructor(mode: DisplayMode, structures: Structure[] | UserStructure[], environments?: Environment[]);
    /**
     * Get a full set of indexes from the global environment index
     * @param  environment global index of an environment
     * @return             full [[Indexes]], containing the corresponding
     *                     structure / atom indexes
     */
    from_environment(environment: number): Indexes;
    /**
     * Get a full set of indexes from the structure/atom indexes
     * @param  structure index of the structure in the full structure list
     * @param  atom      index of the atom in the structure
     * @return an [[Indexes]] instance, containing the global environment index;
     *         or ``undefined`` if there is no environment corresponding to the
     *         given atom in the given structure
     */
    from_structure_atom(structure: number, atom?: number): Indexes | undefined;
    /** Get the total number of environments currently being displayed */
    environmentsCount(): number;
    /** Get the total number of structures we know about */
    structuresCount(): number;
    /** Get the total number of atom in the `structure` with given index */
    atomsCount(structure: number): number;
    /** Get the indexes of structure containing at least one atoms in the set
     * of active environments for this `structure` */
    activeStructures(): number[];
    /** Get the indexes of atoms actually part of the environments for this `structure` */
    activeAtoms(structure: number): number[];
}
