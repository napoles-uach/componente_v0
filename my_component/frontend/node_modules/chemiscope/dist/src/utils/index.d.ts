/**
 * @packageDocumentation
 * @module utils
 */
export { makeDraggable } from './draggable';
export { addWarningHandler, sendWarning, WarningHandler } from './warnings';
/** Callback type to position an HTML element.
 *
 * The callback gets the current placement of the settings as a
 * [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect), and
 * should return top and left positions in pixels, used with `position:
 * fixed`.
 */
export declare type PositioningCallback = (rect: DOMRect) => {
    top: number;
    left: number;
};
export declare function getNextColor(alreadyUsedColors: string[]): string;
/** Type to separate generic strings from GUID */
declare const tag: unique symbol;
export declare type GUID = string & {
    readonly [tag]: 'guid';
};
/** Generate a new GUID */
export declare function generateGUID(): GUID;
/**
 * Get an HTML element by id, looking inside the `root` (by default the whole `document`).
 *
 * The generic parameter `HTMLType` can be used to cast the element to a given type (e.g. `getById<HTMLInputElement>("foo")`) . The element type is not checked by this function.
 *
 * @throws if there is not element with the given id.
 */
export declare function getByID<HTMLType = HTMLElement>(id: string, root?: HTMLElement): HTMLType;
export declare function enumerate<T>(iterable: Iterable<T>): Iterable<[number, T]>;
/**
 * Get the first key of a Map, potentially excluding a specific key value.
 *
 * If `excluding` is specified and the first key is equal to `excluding`; the
 * second key will be returned.
 *
 * @param map       the map where to look for keys
 * @param excluding do not use this specific value if it is the first key
 * @return the first or second key depending on `excluding`
 */
export declare function getFirstKey<K, V>(map: Map<K, V>, excluding?: K): K;
export declare function arrayMaxMin(values: number[]): {
    max: number;
    min: number;
};
/** unreachable marker for cases that REALLY should not happen */
export declare function unreachable(): never;
/** Returns the element based on ID or the element itself*/
export declare function getElement<HTMLElement>(element: string | HTMLElement): HTMLElement;
/**
 * check for the position of `value` in `array` using binary search.
 * The array must be sorted for this to work
 */
export declare function binarySearch(array: number[], value: number): number;
