{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UACH\\\\test1\\\\component-template\\\\template\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\n\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"]; // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n\n      const {\n        theme\n      } = this.props;\n      const style = {}; // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      } // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }\n      }, \"Hello, \", name, \"! \\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n        style: style,\n        onClick: this.onClicked,\n        disabled: this.props.disabled,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, \"Click Me!\"));\n    };\n\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","MyComponent","render","name","props","args","theme","style","borderStyling","state","isFocused","primaryColor","border","outline","onClicked","disabled","_onFocus","_onBlur","setState","prevState","numClicks","setComponentValue"],"sources":["C:/Users/UACH/test1/component-template/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\n\r\n\r\nclass MyComponent extends StreamlitComponentBase<any> {\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n    const name = this.props.args[\"name\"]\r\n\r\n    // Streamlit sends us a theme object via props that we can use to ensure\r\n    // that our component has visuals that match the active theme in a\r\n    // streamlit app.\r\n    const { theme } = this.props\r\n    const style: React.CSSProperties = {}\r\n\r\n    // Maintain compatibility with older versions of Streamlit that don't send\r\n    // a theme object.\r\n    if (theme) {\r\n      // Use the theme object to style our button border. Alternatively, the\r\n      // theme style is defined in CSS vars.\r\n      const borderStyling = `1px solid ${\r\n        this.state.isFocused ? theme.primaryColor : \"gray\"\r\n      }`\r\n      style.border = borderStyling\r\n      style.outline = borderStyling\r\n    }\r\n\r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n    return (\r\n      <span>\r\n        Hello, {name}! &nbsp;\r\n        <button\r\n          style={style}\r\n          onClick={this.onClicked}\r\n          disabled={this.props.disabled}\r\n          onFocus={this._onFocus}\r\n          onBlur={this._onBlur}\r\n        >\r\n          Click Me!\r\n        </button>\r\n      </span>\r\n    )\r\n  }\r\n\r\n  /** Click handler for our \"Click Me!\" button. */\r\n  private onClicked = (): void => {\r\n    // Increment state.numClicks, and pass the new value back to\r\n    // Streamlit via `Streamlit.setComponentValue`.\r\n    this.setState(\r\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\r\n      () => Streamlit.setComponentValue(this.state.numClicks)\r\n    )\r\n  }\r\n\r\n  /** Focus handler for our \"Click Me!\" button. */\r\n  private _onFocus = (): void => {\r\n    this.setState({ isFocused: true })\r\n  }\r\n\r\n  /** Blur handler for our \"Click Me!\" button. */\r\n  private _onBlur = (): void => {\r\n    this.setState({ isFocused: false })\r\n  }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(MyComponent)\r\n"],"mappings":";AAAA,SACEA,SADF,EAEEC,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAiC,OAAjC;;AAGA,MAAMC,WAAN,SAA0BH,sBAA1B,CAAsD;EAAA;IAAA;;IAAA,KAC7CI,MAD6C,GACpC,MAAiB;MAC/B;MACA;MACA,MAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb,CAH+B,CAK/B;MACA;MACA;;MACA,MAAM;QAAEC;MAAF,IAAY,KAAKF,KAAvB;MACA,MAAMG,KAA0B,GAAG,EAAnC,CAT+B,CAW/B;MACA;;MACA,IAAID,KAAJ,EAAW;QACT;QACA;QACA,MAAME,aAAa,GAAI,aACrB,KAAKC,KAAL,CAAWC,SAAX,GAAuBJ,KAAK,CAACK,YAA7B,GAA4C,MAC7C,EAFD;QAGAJ,KAAK,CAACK,MAAN,GAAeJ,aAAf;QACAD,KAAK,CAACM,OAAN,GAAgBL,aAAhB;MACD,CArB8B,CAuB/B;MACA;MACA;MACA;;;MACA,oBACE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,cACUL,IADV,yBAEE;QACE,KAAK,EAAEI,KADT;QAEE,OAAO,EAAE,KAAKO,SAFhB;QAGE,QAAQ,EAAE,KAAKV,KAAL,CAAWW,QAHvB;QAIE,OAAO,EAAE,KAAKC,QAJhB;QAKE,MAAM,EAAE,KAAKC,OALf;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,eAFF,CADF;IAcD,CA1CmD;;IAAA,KA6C5CH,SA7C4C,GA6ChC,MAAY;MAC9B;MACA;MACA,KAAKI,QAAL,CACEC,SAAS,KAAK;QAAEC,SAAS,EAAED,SAAS,CAACC,SAAV,GAAsB;MAAnC,CAAL,CADX,EAEE,MAAMvB,SAAS,CAACwB,iBAAV,CAA4B,KAAKZ,KAAL,CAAWW,SAAvC,CAFR;IAID,CApDmD;;IAAA,KAuD5CJ,QAvD4C,GAuDjC,MAAY;MAC7B,KAAKE,QAAL,CAAc;QAAER,SAAS,EAAE;MAAb,CAAd;IACD,CAzDmD;;IAAA,KA4D5CO,OA5D4C,GA4DlC,MAAY;MAC5B,KAAKC,QAAL,CAAc;QAAER,SAAS,EAAE;MAAb,CAAd;IACD,CA9DmD;EAAA;;AAAA,C,CAiEtD;AACA;AACA;AACA;AACA;;;AACA,eAAeX,uBAAuB,CAACE,WAAD,CAAtC"},"metadata":{},"sourceType":"module"}